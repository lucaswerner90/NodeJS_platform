{
  "_args": [
    [
      {
        "raw": "unzip-stream",
        "scope": null,
        "escapedName": "unzip-stream",
        "name": "unzip-stream",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/je10617/Desktop/express-authenticate"
    ]
  ],
  "_from": "unzip-stream@latest",
  "_id": "unzip-stream@0.1.2",
  "_inCache": true,
  "_location": "/unzip-stream",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/unzip-stream-0.1.2.tgz_1489928402200_0.3821653313934803"
  },
  "_npmUser": {
    "name": "mhr3",
    "email": "michal.mhr@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "unzip-stream",
    "scope": null,
    "escapedName": "unzip-stream",
    "name": "unzip-stream",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://registry.npmjs.org/unzip-stream/-/unzip-stream-0.1.2.tgz",
  "_shasum": "63a7695beedd9ae21ed228970b77896346234fa5",
  "_shrinkwrap": null,
  "_spec": "unzip-stream",
  "_where": "/Users/je10617/Desktop/express-authenticate",
  "author": {
    "name": "Michal Hruby",
    "email": "michal.mhr@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mhr3/unzip-stream/issues"
  },
  "dependencies": {
    "binary": "^0.3.0",
    "fstream": "^1.0.10"
  },
  "description": "Unzip cross-platform streaming API compatible with fstream",
  "devDependencies": {
    "dirdiff": ">= 0.0.1 < 1",
    "stream-buffers": ">= 0.2.5 < 1",
    "tap": ">= 0.3.0 < 1",
    "temp": ">= 0.4.0 < 1"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "shasum": "63a7695beedd9ae21ed228970b77896346234fa5",
    "tarball": "https://registry.npmjs.org/unzip-stream/-/unzip-stream-0.1.2.tgz"
  },
  "gitHead": "5e96a269e626e0b5df6714b27524d7fbb243a348",
  "homepage": "https://github.com/mhr3/unzip-stream#readme",
  "keywords": [
    "zip",
    "unzip",
    "zlib",
    "uncompress",
    "archive",
    "stream",
    "extract"
  ],
  "license": "MIT",
  "main": "unzip.js",
  "maintainers": [
    {
      "name": "Michal Hruby",
      "email": "michal.mhr@gmail.com"
    }
  ],
  "name": "unzip-stream",
  "optionalDependencies": {},
  "readme": "# unzip-stream\n\nStreaming cross-platform unzip tool written in node.js.\n\nThis package is based on [unzip](https://github.com/EvanOxfeld/node-unzip) (and its fork [unzipper](https://github.com/ZJONSSON/node-unzipper)) and provides simple APIs for parsing and extracting zip files. It uses new streaming engine which allows it to process also files which would fail with unzip.\nThere are no added compiled dependencies - inflation is handled by node.js's built in zlib support.\n\nPlease note that the zip file format isn't really meant to be processed by streaming, though this library should succeed in most cases, if you do have complete zip file available, you should consider using other libraries which read zip files from the end - as originally intended (for example [yauzl](https://github.com/thejoshwolfe/yauzl) or [decompress-zip](https://github.com/bower/decompress-zip)).\n\n## Installation\n\n```bash\n$ npm install unzip-stream\n```\n\n## Quick Examples\n\n### Parse zip file contents\n\nProcess each zip file entry or pipe entries to another stream.\n\n__Important__: If you do not intend to consume an entry stream's raw data, call autodrain() to dispose of the entry's\ncontents. Otherwise the stream will get stuck.\n\n```javascript\nfs.createReadStream('path/to/archive.zip')\n  .pipe(unzip.Parse())\n  .on('entry', function (entry) {\n    var filePath = entry.path;\n    var type = entry.type; // 'Directory' or 'File'\n    var size = entry.size; // might be undefined in some archives\n    if (filePath === \"this IS the file I'm looking for\") {\n      entry.pipe(fs.createWriteStream('output/path'));\n    } else {\n      entry.autodrain();\n    }\n  });\n```\n\n### Parse zip by piping entries downstream\n\nIf you `pipe` from unzip-stream the downstream components will receive each `entry` for further processing.   This allows for clean pipelines transforming zipfiles into unzipped data.\n\nExample using `stream.Transform`:\n\n```js\nfs.createReadStream('path/to/archive.zip')\n  .pipe(unzipper.Parse())\n  .pipe(stream.Transform({\n    objectMode: true,\n    transform: function(entry,e,cb) {\n      var filePath = entry.path;\n      var type = entry.type; // 'Directory' or 'File'\n      var size = entry.size;\n      if (filePath === \"this IS the file I'm looking for\") {\n        entry.pipe(fs.createWriteStream('output/path'))\n          .on('finish',cb);\n      } else {\n        entry.autodrain();\n        cb();\n      }\n    }\n  }\n  }));\n```\n\n### Extract to a directory\n```javascript\nfs.createReadStream('path/to/archive.zip').pipe(unzip.Extract({ path: 'output/path' }));\n```\n\nExtract emits the 'finish' (also 'close' for compatibility with unzip) event once the zip's contents have been fully extracted to disk.\n\n### What's missing?\n\nCurrently only ZIP files up to version 2.1 are supported - which means no Zip64 support. There's also no support for encrypted (password protected) zips, or symlinks.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mhr3/unzip-stream.git"
  },
  "scripts": {
    "test": "tap ./test/*.js"
  },
  "version": "0.1.2"
}
