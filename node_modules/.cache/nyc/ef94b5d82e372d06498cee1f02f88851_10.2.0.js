var cov_2mqnifv89z=function(){var path='/Users/je10617/Desktop/express-authenticate/authentication/middleware.js',hash='380ffda5c83f76b0c7a9ad5980502922d0113d1e',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/je10617/Desktop/express-authenticate/authentication/middleware.js',statementMap:{'0':{start:{line:7,column:10},end:{line:7,column:31}},'1':{start:{line:8,column:13},end:{line:8,column:30}},'2':{start:{line:9,column:13},end:{line:9,column:32}},'3':{start:{line:19,column:0},end:{line:52,column:2}},'4':{start:{line:20,column:4},end:{line:30,column:5}},'5':{start:{line:22,column:6},end:{line:29,column:10}},'6':{start:{line:32,column:18},end:{line:32,column:57}},'7':{start:{line:33,column:18},end:{line:33,column:81}},'8':{start:{line:35,column:4},end:{line:44,column:5}},'9':{start:{line:36,column:6},end:{line:43,column:10}},'10':{start:{line:46,column:4},end:{line:46,column:25}},'11':{start:{line:51,column:2},end:{line:51,column:9}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:19,column:28},end:{line:19,column:29}},loc:{start:{line:19,column:50},end:{line:52,column:1}},line:19}},branchMap:{'0':{loc:{start:{line:20,column:4},end:{line:30,column:5}},type:'if',locations:[{start:{line:20,column:4},end:{line:30,column:5}},{start:{line:20,column:4},end:{line:30,column:5}}],line:20},'1':{loc:{start:{line:35,column:4},end:{line:44,column:5}},type:'if',locations:[{start:{line:35,column:4},end:{line:44,column:5}},{start:{line:35,column:4},end:{line:44,column:5}}],line:35},'2':{loc:{start:{line:35,column:7},end:{line:35,column:47}},type:'binary-expr',locations:[{start:{line:35,column:7},end:{line:35,column:15}},{start:{line:35,column:19},end:{line:35,column:47}}],line:35}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0},f:{'0':0},b:{'0':[0,0],'1':[0,0],'2':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();/** @module authentication/middleware *//**
Here are implemented the main functions that creates/check the web token used for the user.
*/const jwt=(++cov_2mqnifv89z.s[0],require('jwt-simple'));const moment=(++cov_2mqnifv89z.s[1],require('moment'));const config=(++cov_2mqnifv89z.s[2],require('./config'));/**
This method check if the user request has the correct authorization header and the correct token
@param {Request} req
@param {Response} res
@param {Function} next
*/++cov_2mqnifv89z.s[3];exports.ensureAuthenticated=function(req,res,next){++cov_2mqnifv89z.f[0];++cov_2mqnifv89z.s[4];if(!req.headers.authorization){++cov_2mqnifv89z.b[0][0];++cov_2mqnifv89z.s[5];return res.status(200).send({status:false,message:"Your request has not authorization header"});}else{++cov_2mqnifv89z.b[0][1];}const token=(++cov_2mqnifv89z.s[6],req.headers.authorization.split(" ")[1]);const payload=(++cov_2mqnifv89z.s[7],jwt.decode(token,config.TOKEN_SECRET,config.SECURITY_ALGORITHM));++cov_2mqnifv89z.s[8];if((++cov_2mqnifv89z.b[2][0],!payload)||(++cov_2mqnifv89z.b[2][1],payload.exp<=moment().unix())){++cov_2mqnifv89z.b[1][0];++cov_2mqnifv89z.s[9];return res.status(401).send({status:false,message:"Token has expired"});}else{++cov_2mqnifv89z.b[1][1];}++cov_2mqnifv89z.s[10];req.user=payload.sub;//Si se da el caso de que el usuario estÃ¡ logueado correctamente entonces avanzamos al siguiente manejador de ruta
++cov_2mqnifv89z.s[11];next();};